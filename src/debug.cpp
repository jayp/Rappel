#include <map>
#include "debug.h"

// (static) global constants
static const int MAGIC_NUMBER = 639;

char* layer_str(int flag) {

  static int init = MAGIC_NUMBER;
  static std::map<int, char*> flags;

  if (init == MAGIC_NUMBER) {

    init++;

    flags[LYR_TRANSPORT] = "LYR_TRANSPORT";
    flags[LYR_APPLICATION] = "LYR_APPLICATION";
    flags[LYR_CONTROL] = "LYR_CONTROL";
    flags[LYR_DRIVER] = "LYR_DRIVER";
  }

  assert(flags.find(flag) != flags.end());
  return flags[flag];
}

char* event_flag_str(int flag) {

  static int init = MAGIC_NUMBER;
  static std::map<int, char*> flags;

  if (init == MAGIC_NUMBER) {

    init++;

    flags[EVT_INIT] = "EVT_INIT";
    flags[EVT_DEBUG] = "EVT_DEBUG";
    flags[EVT_STATS] = "EVT_STATS";
    flags[EVT_FINAL] = "EVT_FINAL";

    flags[EVT_TRANSPORT_RECV] = "EVT_TRANSPORT_RECV";
    flags[EVT_TRANSPORT_DELAY_SEND] = "EVT_TRANSPORT_DELAY_SEND";

    flags[EVT_VIVALDI_PERIODIC_PING] = "EVT_VIVALDI_PERIODIC_PING";
    flags[EVT_VIVALDI_WAIT_AFTER_PING_REQ] = "EVT_VIVALDI_WAIT_AFTER_PING_REQ";
    flags[EVT_VIVALDI_PERIODIC_SYNC] = "EVT_VIVALDI_PERIODIC_SYNC";
    flags[EVT_VIVALDI_WAIT_AFTER_SYNC_REQ] = "EVT_VIVALDI_WAIT_AFTER_SYNC_REQ";
    flags[EVT_VIVALDI_NC_BOOTSTRAP_PERIOD_EXPIRED]
      = "EVT_VIVALDI_NC_BOOTSTRAP_PERIOD_EXPIRED";

    flags[EVT_RAPPEL_PERIODIC_GARBAGE_COLLECT]
      = "EVT_RAPPEL_PERIODIC_GARBAGE_COLLECT";
    flags[EVT_RAPPEL_PERIODIC_AUDIT] = "EVT_RAPPEL_PERIODIC_AUDIT";
    flags[EVT_RAPPEL_WAIT_AFTER_BLOOM_REQ] = "EVT_RAPPEL_WAIT_AFTER_BLOOM_REQ";
    flags[EVT_RAPPEL_WAIT_AFTER_ADD_FRIEND_REQ]
      = "EVT_RAPPEL_WAIT_AFTER_ADD_FRIEND_REQ";
    flags[EVT_RAPPEL_PERIODIC_NODE_CHECK] = "EVT_RAPPEL_PERIODIC_NODE_CHECK";
    flags[EVT_RAPPEL_WAIT_AFTER_PING_REQ] = "EVT_RAPPEL_WAIT_AFTER_PING_REQ";
    flags[EVT_RAPPEL_NEXT_FEED_JOIN] = "EVT_RAPPEL_NEXT_FEED_JOIN";
    flags[EVT_RAPPEL_PERIODIC_FEED_REJOIN] = "EVT_RAPPEL_PERIODIC_FEED_REJOIN";
    flags[EVT_RAPPEL_WAIT_AFTER_FEED_JOIN_REQ]
      = "EVT_RAPPEL_WAIT_AFTER_FEED_JOIN_REQ";
    flags[EVT_RAPPEL_PERIODIC_FEED_RTT_REQ] = "EVT_RAPPL_PERIODIC_FEED_RTT_REQ";
    flags[EVT_RAPPEL_WAIT_AFTER_FEED_UPDATE_PULL_REQ]
      = "EVT_RAPPEL_WAIT_AFTER_UPDATE_PULL_REQ";

    flags[EVT_DRIVER_DEBUG_MISC] = "EVT_DRIVER_DEBUG_MISC";
    flags[EVT_DRIVER_LOAD_ACTION_CMDS] = "EVT_DRIVER_LOAD_ACTION_CMDS";
    flags[EVT_DRIVER_ADD_NODE] = "EVT_DRIVER_ADD_NODE";
    flags[EVT_DRIVER_BRING_NODE_ONLINE] = "EVT_DRIVER_BRING_NODE_ONLINE";
    flags[EVT_DRIVER_TAKE_NODE_OFFLINE] = "EVT_DRIVER_TAKE_NODE_OFFLINE";
    flags[EVT_DRIVER_ADD_FEED] = "EVT_DRIVER_ADD_FEED";
    flags[EVT_DRIVER_REMOVE_FEED] = "EVT_DRIVER_REMOVE_FEED";
    flags[EVT_DRIVER_PUBLISH] = "EVT_DRIVER_PUBLISH";
  }

  assert(flags.find(flag) != flags.end());
  return flags[flag];
}

char* msg_flag_str(int flag) {

  static int init = MAGIC_NUMBER;
  static std::map<int, char*> flags;

  if (init == MAGIC_NUMBER) {

    init++;

#if COMPILE_FOR == NETWORK
    flags[MSG_CMD_SIGNAL_BOOTSTRAPPED] = "MSG_CMD_SIGNAL_BOOTSTRAPPED";
    flags[MSG_CMD_SIGNAL_TRIGGER] = "MSG_CMD_SIGNAL_TRIGGER";
    flags[MSG_CMD_SIGNAL_TRIGGERED] = "MSG_CMD_SIGNAL_TRIGGERED";
    flags[MSG_CMD_SIGNAL_STOP] = "MSG_CMD_SIGNAL_STOP";
    flags[MSG_CMD_SIGNAL_STOPPING] = "MSG_CMD_SIGNAL_STOPPING";
#endif // COMPILE_FOR == NETWORK

    flags[MSG_VIVALDI_PING_REQ] = "MSG_VIVALDI_PING_REQ";
    flags[MSG_VIVALDI_PING_REPLY] = "MSG_VIVALDI_PING_REPLY";
    flags[MSG_VIVALDI_SYNC_REQ] = "MSG_VIVALDI_SYNC_REQ";
    flags[MSG_VIVALDI_SYNC_REPLY] = "MSG_VIVALDI_SYNC_REPLY";

    flags[MSG_RAPPEL_BLOOM_REQ] = "MSG_RAPPEL_BLOOM_REQ";
    flags[MSG_RAPPEL_BLOOM_REPLY] = "MSG_RAPPEL_BLOOM_REPLY";
    flags[MSG_RAPPEL_ADD_FRIEND_REQ] = "MSG_RAPPEL_ADD_FRIEND_REQ";
    flags[MSG_RAPPEL_REMOVE_FRIEND] = "MSG_RAPPEL_REMOVE_FRIEND";
    flags[MSG_RAPPEL_ADD_FRIEND_REPLY] = "MSG_RAPPEL_ADD_FRIEND_REPLY";
    flags[MSG_RAPPEL_REMOVE_FAN] = "MSG_RAPPEL_REMOVE_FAN";
    flags[MSG_RAPPEL_PING_REQ] = "MSG_RAPPEL_PING_REQ";
    flags[MSG_RAPPEL_PING_REPLY] = "MSG_RAPPEL_PING_REPLY";
    flags[MSG_RAPPEL_FEED_JOIN_REQ] = "MSG_RAPPEL_FEED_JOIN_REQ";
    flags[MSG_RAPPEL_FEED_JOIN_REPLY_DENY] = "MSG_RAPPEL_FEED_JOIN_REPLY_DENY";
    flags[MSG_RAPPEL_FEED_JOIN_REPLY_OK] = "MSG_RAPPEL_FEED_JOIN_REPLY_OK";
    flags[MSG_RAPPEL_FEED_JOIN_REPLY_FWD] = "MSG_RAPPEL_FEED_JOIN_REPLY_FWD";
    flags[MSG_RAPPEL_FEED_CHANGE_PARENT] = "MSG_RAPPEL_FEED_CHANGE_PARENT";
    flags[MSG_RAPPEL_FEED_NO_LONGER_YOUR_CHILD]
      = "MSG_RAPPEL_FEED_NO_LONGER_YOUR_CHILD";
    flags[MSG_RAPPEL_FEED_FLUSH_ANCESTRY] = "MSG_RAPPEL_FEED_FLUSH_ANCESTRY";
    flags[MSG_RAPPEL_FEED_UPDATE] = "MSG_RAPPEL_FEED_UPDATE";
    flags[MSG_RAPPEL_FEED_UPDATE_PULL_REQ] = "MSG_RAPPEL_FEED_UPDATE_PULL_REQ";
  }

  assert(flags.find(flag) != flags.end());
  return flags[flag];
}

/*
char* ping_type_str(int type) {
  static int init = MAGIC_NUMBER;
  static std::map<int, char*> types;

  if (init == MAGIC_NUMBER) {

    init++;

    types[PING_TYPE_FRIEND] = "PING_TYPE_FRIEND";
    types[PING_TYPE_PARENT] = "PING_TYPE_PARENT";
    types[PING_TYPE_BACKUP] = "PING_TYPE_BACKUP";
  }

  assert(types.find(type) != types.end());
  return types[type];

  assert(false);
  return "ERROR";
}
*/
